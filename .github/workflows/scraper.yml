name: Daily Web Scraping

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at 00:00 UTC every day
  workflow_dispatch:  # Allows manual triggering

jobs:
  scrape:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Add timeout to prevent hanging
    
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      timeout-minutes: 5
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify database connection
      timeout-minutes: 2
      run: |
        python -c "
        import psycopg2
        import os
        import sys
        
        try:
            conn = psycopg2.connect(
                dbname=os.getenv('DB_NAME'),
                user=os.getenv('DB_USER'),
                password=os.getenv('DB_PASSWORD'),
                host=os.getenv('DB_HOST'),
                port=os.getenv('DB_PORT'),
                connect_timeout=10  # Add connection timeout
            )
            print('Database connection successful')
            conn.close()
        except Exception as e:
            print(f'Database connection failed: {e}')
            sys.exit(1)
        "
    
    - name: Run scraper with timeout
      timeout-minutes: 20  # Set maximum runtime for scraper
      run: |
        # Run with timeout and capture output
        timeout 1200 python main.py || {
          echo "Scraper timed out or failed"
          exit 1
        }
      
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: scraper-logs
        path: |
          scraper_*.log
          *.txt
        retention-days: 7

    - name: Cleanup
      if: always()  # Run cleanup even if previous steps failed
      run: |
        # Kill any hanging python processes
        pkill -9 python || true
        # Clean up any temporary files
        rm -f *.tmp
        rm -f *.pyc
        # Close any remaining database connections
        python -c "
        import psycopg2
        import os
        try:
            conn = psycopg2.connect(
                dbname=os.getenv('DB_NAME'),
                user=os.getenv('DB_USER'),
                password=os.getenv('DB_PASSWORD'),
                host=os.getenv('DB_HOST'),
                port=os.getenv('DB_PORT')
            )
            conn.close()
        except:
            pass
        "